// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.nancy.newapplication.dependencyInjection;

import com.nancy.newapplication.Activity.MainActivity;
import com.nancy.newapplication.Activity.MainActivity_MembersInjector;
import com.nancy.newapplication.Service.ApiService;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerApiComponent implements ApiComponent {
  private Provider<Retrofit> retrofitProvider;

  private Provider<ApiService> provideFlowerServiceProvider;

  private DaggerApiComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.retrofitProvider =
        new com_nancy_newapplication_dependencyInjection_NetworkComponent_retrofit(
            builder.networkComponent);
    this.provideFlowerServiceProvider =
        DoubleCheck.provider(
            ApiModule_ProvideFlowerServiceFactory.create(builder.apiModule, retrofitProvider));
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectMApiService(instance, provideFlowerServiceProvider.get());
    return instance;
  }

  public static final class Builder {
    private ApiModule apiModule;

    private NetworkComponent networkComponent;

    private Builder() {}

    public ApiComponent build() {
      if (apiModule == null) {
        this.apiModule = new ApiModule();
      }
      if (networkComponent == null) {
        throw new IllegalStateException(NetworkComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerApiComponent(this);
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }

    public Builder networkComponent(NetworkComponent networkComponent) {
      this.networkComponent = Preconditions.checkNotNull(networkComponent);
      return this;
    }
  }

  private static class com_nancy_newapplication_dependencyInjection_NetworkComponent_retrofit
      implements Provider<Retrofit> {
    private final NetworkComponent networkComponent;

    com_nancy_newapplication_dependencyInjection_NetworkComponent_retrofit(
        NetworkComponent networkComponent) {
      this.networkComponent = networkComponent;
    }

    @Override
    public Retrofit get() {
      return Preconditions.checkNotNull(
          networkComponent.retrofit(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
