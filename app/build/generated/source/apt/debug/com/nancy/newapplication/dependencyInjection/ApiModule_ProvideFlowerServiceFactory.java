// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.nancy.newapplication.dependencyInjection;

import com.nancy.newapplication.Service.ApiService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class ApiModule_ProvideFlowerServiceFactory implements Factory<ApiService> {
  private final ApiModule module;

  private final Provider<Retrofit> retrofitProvider;

  public ApiModule_ProvideFlowerServiceFactory(
      ApiModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public ApiService get() {
    return Preconditions.checkNotNull(
        module.provideFlowerService(retrofitProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<ApiService> create(ApiModule module, Provider<Retrofit> retrofitProvider) {
    return new ApiModule_ProvideFlowerServiceFactory(module, retrofitProvider);
  }

  public static ApiService proxyProvideFlowerService(ApiModule instance, Retrofit retrofit) {
    return instance.provideFlowerService(retrofit);
  }
}
